import { describe, it, expect } from 'vitest'
import { SchemaGenerator } from '../../../src/database/schema-generator.js'
import type { Blueprint } from '../../../src/types/blueprint.js'

describe('SchemaGenerator', () => {
  const generator = new SchemaGenerator()

  describe('generate', () => {
    it('should generate schema for simple entity', () => {
      const blueprint: Blueprint = {
        version: '0.1.0',
        project: {
          name: 'Test',
          version: '1.0.0',
          runtime: { min_version: '0.1.0' }
        },
        entities: [
          {
            name: 'Customer',
            fields: [
              { name: 'id', type: 'ULID', primary_key: true },
              { name: 'name', type: 'Text', required: true },
              { name: 'email', type: 'Email', required: true, unique: true }
            ]
          }
        ],
        pages: []
      }

      const result = generator.generate(blueprint)

      expect(result).toBeDefined()
      expect(result.tables).toHaveProperty('Customer')
      expect(Object.keys(result.tables)).toContain('Customer')
    })

    it('should generate fields with correct types', () => {
      const blueprint: Blueprint = {
        version: '0.1.0',
        project: {
          name: 'Test',
          version: '1.0.0',
          runtime: { min_version: '0.1.0' }
        },
        entities: [
          {
            name: 'Post',
            fields: [
              { name: 'id', type: 'ULID', primary_key: true },
              { name: 'title', type: 'Text' },
              { name: 'content', type: 'LongText' },
              { name: 'views', type: 'Integer' },
              { name: 'rating', type: 'Float' },
              { name: 'published', type: 'Boolean' },
              { name: 'publishedAt', type: 'DateTime' },
              { name: 'metadata', type: 'JSON' }
            ]
          }
        ],
        pages: []
      }

      const result = generator.generate(blueprint)

      expect(result.tables).toHaveProperty('Post')
      // Drizzle schema object should be generated
      expect(result.tables.Post).toBeDefined()
    })

    it('should handle nullable fields', () => {
      const blueprint: Blueprint = {
        version: '0.1.0',
        project: {
          name: 'Test',
          version: '1.0.0',
          runtime: { min_version: '0.1.0' }
        },
        entities: [
          {
            name: 'User',
            fields: [
              { name: 'id', type: 'ULID', primary_key: true },
              { name: 'name', type: 'Text', required: true },
              { name: 'bio', type: 'Text', nullable: true }
            ]
          }
        ],
        pages: []
      }

      const result = generator.generate(blueprint)

      expect(result.tables).toHaveProperty('User')
    })

    it('should handle relationships', () => {
      const blueprint: Blueprint = {
        version: '0.1.0',
        project: {
          name: 'Test',
          version: '1.0.0',
          runtime: { min_version: '0.1.0' }
        },
        entities: [
          {
            name: 'User',
            fields: [
              { name: 'id', type: 'ULID', primary_key: true },
              { name: 'name', type: 'Text' }
            ]
          },
          {
            name: 'Post',
            fields: [
              { name: 'id', type: 'ULID', primary_key: true },
              { name: 'title', type: 'Text' },
              { name: 'authorId', type: 'Ref', ref: { entity: 'User', field: 'id' } }
            ]
          }
        ],
        pages: []
      }

      const result = generator.generate(blueprint)

      expect(result.tables).toHaveProperty('User')
      expect(result.tables).toHaveProperty('Post')
    })

    it('should handle enum fields', () => {
      const blueprint: Blueprint = {
        version: '0.1.0',
        project: {
          name: 'Test',
          version: '1.0.0',
          runtime: { min_version: '0.1.0' }
        },
        entities: [
          {
            name: 'Task',
            fields: [
              { name: 'id', type: 'ULID', primary_key: true },
              {
                name: 'status',
                type: 'Enum',
                values: ['pending', 'in_progress', 'completed']
              }
            ]
          }
        ],
        pages: []
      }

      const result = generator.generate(blueprint)

      expect(result.tables).toHaveProperty('Task')
    })

    it('should handle default values', () => {
      const blueprint: Blueprint = {
        version: '0.1.0',
        project: {
          name: 'Test',
          version: '1.0.0',
          runtime: { min_version: '0.1.0' }
        },
        entities: [
          {
            name: 'User',
            fields: [
              { name: 'id', type: 'ULID', primary_key: true },
              { name: 'name', type: 'Text' },
              { name: 'createdAt', type: 'DateTime', default: 'now' },
              { name: 'active', type: 'Boolean', default: true }
            ]
          }
        ],
        pages: []
      }

      const result = generator.generate(blueprint)

      expect(result.tables).toHaveProperty('User')
    })

    it('should handle unique constraints', () => {
      const blueprint: Blueprint = {
        version: '0.1.0',
        project: {
          name: 'Test',
          version: '1.0.0',
          runtime: { min_version: '0.1.0' }
        },
        entities: [
          {
            name: 'User',
            fields: [
              { name: 'id', type: 'ULID', primary_key: true },
              { name: 'email', type: 'Email', unique: true },
              { name: 'username', type: 'Text', unique: true }
            ]
          }
        ],
        pages: []
      }

      const result = generator.generate(blueprint)

      expect(result.tables).toHaveProperty('User')
    })

    it('should handle indexes', () => {
      const blueprint: Blueprint = {
        version: '0.1.0',
        project: {
          name: 'Test',
          version: '1.0.0',
          runtime: { min_version: '0.1.0' }
        },
        entities: [
          {
            name: 'Post',
            fields: [
              { name: 'id', type: 'ULID', primary_key: true },
              { name: 'title', type: 'Text', index: true },
              { name: 'slug', type: 'Text', index: true }
            ]
          }
        ],
        pages: []
      }

      const result = generator.generate(blueprint)

      expect(result.tables).toHaveProperty('Post')
    })
  })

  describe('table name normalization', () => {
    it('should preserve PascalCase entity names', () => {
      const blueprint: Blueprint = {
        version: '0.1.0',
        project: {
          name: 'Test',
          version: '1.0.0',
          runtime: { min_version: '0.1.0' }
        },
        entities: [
          {
            name: 'BlogPost',
            fields: [
              { name: 'id', type: 'ULID', primary_key: true }
            ]
          }
        ],
        pages: []
      }

      const result = generator.generate(blueprint)

      expect(result.tables).toHaveProperty('BlogPost')
      expect(Object.keys(result.tables)).toContain('BlogPost')
    })
  })
})
