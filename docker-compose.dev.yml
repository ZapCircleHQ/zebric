# Docker Compose for Zebric Runtime Development
# This setup is for developers working on the Zebric runtime itself

version: '3.8'

services:
  # Development environment with hot reload
  zebric-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    container_name: zebric-dev
    ports:
      - "3000:3000"      # Application port
      - "9090:9090"      # Metrics port (optional separate port)
    volumes:
      # Mount source code for hot reload
      - ./packages:/app/packages:delegated
      - ./examples:/app/examples:delegated
      - ./tsconfig.json:/app/tsconfig.json:ro
      - ./package.json:/app/package.json:ro
      - ./pnpm-lock.yaml:/app/pnpm-lock.yaml:ro
      - ./pnpm-workspace.yaml:/app/pnpm-workspace.yaml:ro
      # Node modules in named volume for performance
      - node_modules:/app/node_modules
      - runtime_node_modules:/app/packages/runtime/node_modules
      - cli_node_modules:/app/packages/cli/node_modules
    environment:
      - NODE_ENV=development
      - DATABASE_URL=file:./dev.db
      - PORT=3000
      - LOG_LEVEL=debug
      # Better Auth configuration
      - BETTER_AUTH_SECRET=${BETTER_AUTH_SECRET:-dev-secret-change-in-production}
      - BETTER_AUTH_URL=http://localhost:3000
      # Monitoring
      - METRICS_ENABLED=true
      - HEALTH_CHECK_ENABLED=true
    command: pnpm dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    networks:
      - zebric-dev-network

  # PostgreSQL for development (optional - for testing Postgres support)
  postgres-dev:
    image: postgres:16-alpine
    container_name: zebric-postgres-dev
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=zebric_dev
      - POSTGRES_PASSWORD=zebric_dev_password
      - POSTGRES_DB=zebric_development
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U zebric_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - zebric-dev-network

  # Redis for development (optional - for testing Redis/BullMQ support)
  redis-dev:
    image: redis:7-alpine
    container_name: zebric-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - zebric-dev-network

  # Prometheus for metrics collection (development monitoring)
  prometheus-dev:
    image: prom/prometheus:latest
    container_name: zebric-prometheus-dev
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus-dev.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_dev_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - zebric-dev-network
    depends_on:
      - zebric-dev

  # Grafana for metrics visualization (development monitoring)
  grafana-dev:
    image: grafana/grafana:latest
    container_name: zebric-grafana-dev
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3001
    volumes:
      - grafana_dev_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - zebric-dev-network
    depends_on:
      - prometheus-dev

volumes:
  node_modules:
  runtime_node_modules:
  cli_node_modules:
  postgres_dev_data:
  redis_dev_data:
  prometheus_dev_data:
  grafana_dev_data:

networks:
  zebric-dev-network:
    driver: bridge
